plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = '1.0-SNAPSHOT'

ext{
    openapi = "6.1.3"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    //maven { url 'https://repo.kotlin.link' }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    //JAVALIN DEPENDENCIES
    implementation 'io.javalin:javalin:6.4.0'
    implementation 'org.slf4j:slf4j-simple:2.0.11'
    implementation 'io.javalin:javalin-rendering:6.1.3'


    //THYMELEAF PLANTILLA
    implementation 'org.thymeleaf:thymeleaf:3.1.1.RELEASE'

    //KOTLIN USAGE
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    //JSON FOR JAVALIN
    implementation("com.fasterxml.jackson.core:jackson-core:2.15.2")
    implementation('com.fasterxml.jackson.core:jackson-databind:2.15.2')
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.15.2")

    //ORM HIBERNATE
    implementation 'org.hibernate.orm:hibernate-core:6.0.2.Final'

    //H2 CONNECTION
    implementation 'com.h2database:h2:2.1.214'
    implementation 'org.postgresql:postgresql:42.3.8'

    // OpenAPI
    annotationProcessor "io.javalin.community.openapi:openapi-annotation-processor:$openapi"
    implementation "io.javalin.community.openapi:javalin-openapi-plugin:$openapi" // for /openapi route with JSON scheme
    implementation "io.javalin.community.openapi:javalin-swagger-plugin:$openapi" // for Swagger UI
    implementation "io.javalin.community.openapi:javalin-redoc-plugin:$openapi" // for ReDoc UI

    //mongoDB
    implementation group: 'org.mongodb', name: 'mongodb-driver-sync', version: '4.10.2'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'practica.Main'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

shadowJar{
    archiveBaseName.set("app")
    archiveClassifier.set('')
    archiveVersion.set('')
}

task stage {
    dependsOn shadowJar
}
